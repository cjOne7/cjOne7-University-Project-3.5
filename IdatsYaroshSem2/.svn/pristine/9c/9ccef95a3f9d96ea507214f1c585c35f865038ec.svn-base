package table;

import collection.KolekceException;
import java.util.Iterator;
import java.io.Serializable;
import java.util.NoSuchElementException;
import queueNstack.*;

public class AbstrTable<K extends Comparable<K>, V> implements Table<K, V> {

    private Node root;

    @Override
    public void zrus() {
        root = null;
    }

    @Override
    public boolean jePrazdny() {
        return root == null;
    }

    @Override
    public int mohutnost() {
        return size(root);
    }

    public Node getRoot() {
        return root;
    }

    private int size(final Node root) {
        final QueueStack<Node> stack = new AbstrLIFO<>();
        stack.vloz(root);

        int size = 0;

        if (root == null) {
            return size;
        }
        size = 1;
        while (!stack.jePrazdny()) {
            Node node = stack.odeber();
            if (node.right != null) {
                size++;
                stack.vloz(node.right);
            }
            if (node.left != null) {
                size++;
                stack.vloz(node.left);
            }
        }
        return size;
    }

    @Override
    public void vloz(final K key, final V value) throws KolekceException {
        if (key == null || value == null) {
            throw new KolekceException("Key or value is null.");
        }
        if (jePrazdny()) {
            root = new Node(key, value);
        } else {
            Node node = root, helpNode = null;
            while (node != null) {
                int cmp = key.compareTo(node.key);
                if (cmp == 0) {
                    node.value = value;
                    return;
                } else {
                    helpNode = node;
                    if (cmp < 0) {
                        node = node.left;
                    } else {
                        node = node.right;
                    }
                }
            }
            final Node newNode = new Node(key, value);
            if (helpNode == null) {
                root = newNode;
            } else {
                if (key.compareTo(helpNode.key) < 0) {
                    helpNode.left = newNode;
                } else {
                    helpNode.right = newNode;
                }
            }
        }
    }

    @Override
    public V najdi(final K key) {
        if (key == null) {
            throw new NullPointerException("Key is null");
        }
        if (jePrazdny()) {
            throw new NoSuchElementException("Tree is empty");
        }
        Node findNode = root;
        while (findNode != null) {
            int cmp = key.compareTo(findNode.key);
            if (cmp == 0) {
                return findNode.value;
            }
            if (cmp < 0) {
                findNode = findNode.left;
            } else {
                findNode = findNode.right;
            }
        }
        return null;
    }

    @Override
    public V odeber(final K key) throws IllegalAccessException {
        if (key == null) {
            throw new IllegalAccessException("Key is null.");
        }
        Node node = root, helpNode = null;
        while (node != null) {
            int cmp = key.compareTo(node.key);
            if (cmp == 0) {
                break;
            } else {
                helpNode = node;
                if (cmp < 0) {
                    node = node.left;
                } else {
                    node = node.right;
                }
            }
        }
        if (node == null) {
            return null;
        }
        final V deletedNode = node.value;
        if (node.right == null) {
            if (helpNode == null) {
                root = node.left;
            } else {
                if (node == helpNode.left) {
                    helpNode.left = node.left;
                } else {
                    helpNode.right = node.left;
                }
            }
        } else {
            Node leftMost = node.right;
            helpNode = null;
            while (leftMost.left != null) {
                helpNode = leftMost;
                leftMost = leftMost.left;
            }
            if (helpNode != null) {
                helpNode.left = leftMost.right;
            } else {
                node.right = leftMost.right;
            }
            node.key = leftMost.key;
            node.value = leftMost.value;
        }
        return deletedNode;
    }

    @Override
    public Iterator<V> vytvorIterator(final TypProhlidky typ) {
        switch (typ) {
            case IN_ORDER:
                return new Iterator<V>() {
                    final QueueStack<Node> stack = new AbstrLIFO<>();

                    {
                        Node node = root;
                        while (node != null) {
                            stack.vloz(node);
                            node = node.left;
                        }
                    }

                    @Override
                    public boolean hasNext() {
                        return !stack.jePrazdny();
                    }

                    @Override
                    public V next() {
                        if (!hasNext()) {
                            throw new NoSuchElementException();
                        }
                        Node node = stack.odeber();
                        final V result = node.value;
                        if (node.right != null) {
                            node = node.right;
                            while (node != null) {
                                stack.vloz(node);
                                node = node.left;
                            }
                        }
                        return result;
                    }
                };
            case LEVEL_ORDER:
                return iterator();
        }
        return null;
    }

    @Override
    public Iterator<V> iterator() {
        return new Iterator<V>() {
            final QueueStack<Node> queue = new AbstrFIFO<>();

            {
                queue.vloz(root);
            }

            @Override
            public boolean hasNext() {
                return !queue.jePrazdny();
            }

            @Override
            public V next() {
                if (!hasNext()) {
                    throw new NoSuchElementException();
                }
                final Node node = queue.odeber();
                final V result = node.value;
                if (node.left != null) {
                    queue.vloz(node.left);
                }
                if (node.right != null) {
                    queue.vloz(node.right);
                }
                return result;
            }
        };
    }

    private class Node implements Serializable {

        private K key;
        private V value;
        private Node left;
        private Node right;

        public Node(final K key, final V value) {
            this.value = value;
            this.key = key;
        }
    }
}
