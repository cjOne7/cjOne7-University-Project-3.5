package sprava;

import therapy.Serializer;
import collection.AbstrDoubleList;
import collection.KolekceException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import therapistData.Therapist;
import therapistData.WorkHours;
import therapy.Therapy;
import therapy.Term;
import therapy.DurOfTherapy;
import util.MaticeObsazenosti;
import util.Obdobi;
import therapy.GenerateTerms;

public class SpravaTerminu implements Sprava {

    public static final MaticeObsazenosti DEFAULT = new MaticeObsazenosti(Obdobi.NEXT_WEEK, WorkHours.STANDARD_WORK_HOURS);

    private AbstrDoubleList<Term> listOfTerms;
    private Therapist therapist;
    private Consumer<String> alert = (t) -> {
        System.out.println(t);
    };
    private Consumer<String> logger = (t) -> {
        System.out.println(t);
    };

    private MaticeObsazenosti maticeObsazenosti;
    private GenerateTerms generateTerms = new GenerateTerms();

    private final Consumer<String> NULL_CONSUMER = s -> {
    };

    public SpravaTerminu(
            final Therapist terapeut,
            final Consumer<String> alert,
            final Consumer<String> logger) {
        this.listOfTerms = new AbstrDoubleList<>();
        this.therapist = (terapeut == null) ? Therapist.EMPTY_THERAPIST : terapeut;
        this.alert = (alert == null) ? NULL_CONSUMER : alert;
        this.logger = (alert == null) ? NULL_CONSUMER : logger;
    }

    @Override
    public void vlozTermin(Term termin) throws SpravceException {
        if (jeVolno(termin.getStart(), termin.getEnd())) {
            listOfTerms.vlozPosledni(termin);
            logger.accept("Term has been added.");
        }
    }

    @Override
    public void vlozTermin(Term termin, Pozice pozice) throws SpravceException {
        if (jeVolno(termin.getStart(), termin.getEnd())) {
            switch (pozice) {
                case PRVNI:
                    try {
                        listOfTerms.vlozPrvni(termin);
                    } catch (NullPointerException e) {
                        alert.accept(e.getMessage());
                    }
                    break;
                case POSLEDNI:
                    try {
                        listOfTerms.vlozPosledni(termin);
                    } catch (NullPointerException e) {
                        alert.accept(e.getMessage());
                    }
                    break;
                case PREDCHUDCE:
                    try {
                        listOfTerms.vlozPredchudce(termin);
                    } catch (KolekceException | NullPointerException e) {
                        alert.accept(e.getMessage());
                    }
                    break;
                case NASLEDNIK:
                    try {
                        listOfTerms.vlozNaslednika(termin);
                    } catch (KolekceException | NullPointerException e) {
                        alert.accept(e.getMessage());
                    }
                    break;
            }
        }
        logger.accept("Term has been added on the pozition: " + pozice.name());
    }

    @Override
    public Term zpristupniTermin(Pozice pozice) throws SpravceException {
        switch (pozice) {
            case PRVNI:
                try {
                    return listOfTerms.zpristupniPrvni();
                } catch (NoSuchElementException e) {
                    alert.accept(e.getMessage());
                }
            case POSLEDNI:
                try {
                    return listOfTerms.zpristupniPosledni();
                } catch (NoSuchElementException e) {
                    alert.accept(e.getMessage());
                }
            case PREDCHUDCE:
                try {
                    return listOfTerms.zpristupniPredchudce();
                } catch (KolekceException | NoSuchElementException e) {
                    alert.accept(e.getMessage());
                }
            case NASLEDNIK:
                try {
                    return listOfTerms.zpristupniNaslednika();
                } catch (KolekceException | NoSuchElementException e) {
                    alert.accept(e.getMessage());
                }
            case AKTUALNI:
                try {
                    return listOfTerms.zpristupniAktualni();
                } catch (KolekceException | NoSuchElementException e) {
                    alert.accept(e.getMessage());
                }
            default:
                return Term.EMPTY_TERM;
        }
    }

    @Override
    public Term odeberTermin(Pozice pozice) throws SpravceException {
        switch (pozice) {
            case PRVNI:
                try {
                    return listOfTerms.odeberPrvni();
                } catch (KolekceException e) {
                    alert.accept(e.getMessage());
                }
            case POSLEDNI:
                try {
                    return listOfTerms.odeberPosledni();
                } catch (KolekceException e) {
                    alert.accept(e.getMessage());
                }
            case PREDCHUDCE:
                try {
                    return listOfTerms.odeberPredchudce();
                } catch (KolekceException | NoSuchElementException e) {
                    alert.accept(e.getMessage());
                }
            case NASLEDNIK:
                try {
                    return listOfTerms.odeberNaslednika();
                } catch (KolekceException | NoSuchElementException e) {
                    alert.accept(e.getMessage());
                }
            case AKTUALNI:
                try {
                    return listOfTerms.odeberAktualni();
                } catch (KolekceException | NoSuchElementException e) {
                    alert.accept(e.getMessage());
                }
            default:
                return Term.EMPTY_TERM;
        }
    }

    @Override
    public boolean jeVolno(LocalDateTime odKdy, LocalDateTime doKdy) throws SpravceException {
        return maticeObsazenosti.jeVolno(odKdy, doKdy);
    }

    @Override
    public MaticeObsazenosti getObsazenost(LocalDate odKdy, LocalDate doKdy) {
        Obdobi obdobi = new Obdobi(odKdy, doKdy);
        maticeObsazenosti = new MaticeObsazenosti(obdobi, therapist.getWorkHours());
        return maticeObsazenosti;
    }

    @Override
    public Term najdiPrvniVolnyTermin(Therapy terapie, DurOfTherapy trvani, LocalDate odkdy, LocalDate dokdy) {
        LocalDateTime dateTime = maticeObsazenosti.najdiPrvniVolneMisto(trvani.getDurOfTherapy());
        return new Term(terapie, trvani, dateTime);
    }

    @Override
    public void uloz(String fileName) throws SpravceException {
        Serializer.saveBinary(listOfTerms, fileName, generateTerms.getIsBusy());
    }

    @Override
    public void nacti(String fileName) throws SpravceException {
        Serializer.loadBinary(listOfTerms, fileName, generateTerms);
    }

    @Override
    public Therapist getTherapist() {
        return therapist;
    }

    @Override
    public void zrus() {
        listOfTerms.zrus();
    }

    @Override
    public void generuj(Obdobi obdobi, int pocetTerapii) {
        generateTerms.generateTerms(pocetTerapii, therapist.getWorkHours(), obdobi.getDatumOdKdy(), obdobi.getDatumDoKdy());
    }

    @Override
    public Iterator<Term> iterator() {
        return new Iterator<Term>() {
            @Override
            public boolean hasNext() {
                return listOfTerms.iterator().hasNext();
            }

            @Override
            public Term next() {
                return listOfTerms.iterator().next();
            }
        };
    }
}
